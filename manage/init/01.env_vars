#!/usr/bin/env ruby

require 'fileutils'

begin
  require 'colored'
rescue LoadError
  abort('apt-get install ruby-colored')
end

PROJECT_NAME = File.basename(Dir.pwd)
TOP_DIR = File.expand_path(File.join('~/.env', PROJECT_NAME))

def gen_password
  # Error handling not required, backticks fails ok if pwgen is not in path
  `pwgen 40 1`.chomp
end

#DATABASE_URL: postgres://{user}:{password}@{hostname}:{port}/{database-name}
app_pw = gen_password
admin_pw = gen_password
postgres_pw = gen_password

dev_dbname = "#{PROJECT_NAME}_development"
test_dbname = "#{PROJECT_NAME}_test"

app_user = "spring"
admin_user = "flyway"

app_vars = {
  APP_USER: app_user,
  APP_PASSWORD: app_pw,            # required by manage/dev/init/02.db_container (simulates managed db environment)

  ADMIN_USER: admin_user,
  ADMIN_PASSWORD: admin_pw,        # required by manage/dev/init/02.db_container (simulates managed db environment)

  POSTGRES_PASSWORD: postgres_pw, # requirement for postgres image setup, per upstream

  DEV_DBNAME: dev_dbname,
  TEST_DBNAME: test_dbname,

  # For docker env
  DATABASE_URL_DEVELOPMENT: "postgres://#{app_user}:#{app_pw}@db:5432/#{dev_dbname}",
  ADMIN_DATABASE_URL_DEVELOPMENT: "postgres://#{admin_user}:#{admin_pw}@db:5432/#{dev_dbname}",
  DATABASE_URL_TEST: "postgres://#{app_user}:#{app_pw}@db:5432/#{test_dbname}",
  ADMIN_DATABASE_URL_TEST: "postgres://#{admin_user}:#{admin_pw}@db:5432/#{test_dbname}",

  # For local env
  DATABASE_URL_DEVELOPMENT_LOCAL: "postgres://#{app_user}:#{app_pw}@localhost:5432/#{dev_dbname}",
  ADMIN_DATABASE_URL_DEVELOPMENT_LOCAL: "postgres://#{admin_user}:#{admin_pw}@localhost:5432/#{dev_dbname}",
  DATABASE_URL_TEST_LOCAL: "postgres://#{app_user}:#{app_pw}@localhost:5432/#{test_dbname}",
  ADMIN_DATABASE_URL_TEST_LOCAL: "postgres://#{admin_user}:#{admin_pw}@localhost:5432/#{test_dbname}",
  POSTGRES_DATABASE_URL_LOCAL: "postgres://postgres:#{postgres_pw}@localhost:5432/postgres",

  # For intellij
  PGPASS_LINE_POSTGRES: "localhost:5432:*:postgres:#{postgres_pw}",
  PGPASS_LINE_ADMIN: "localhost:5432:*:#{admin_user}:#{admin_pw}",
  PGPASS_LINE_APP: "localhost:5432:*/#{app_user}:#{app_pw}",
}

def setup!(arg)
  if arg == 'redo'
    warn("Removing previous config".red)
    FileUtils.rm_r(TOP_DIR)
  end
  FileUtils.mkdir_p(TOP_DIR)
  FileUtils.chmod(0700, TOP_DIR)
end

def create_env_file(filename, vars)
  env_path = File.join(TOP_DIR, filename)
  if File.exist?(env_path)
    warn("Skipping create env file because exists (use 'redo' to recreate): #{env_path}".yellow.bold)
    return
  end

  warn("Creating env file: #{env_path}".blue.bold)
  File.open(env_path, 'w') do |f|
    vars.each do |name, value|
      f.write("#{name}=#{value}\n")
    end
  end
  FileUtils.chmod(0600, env_path)
end

setup!(ARGV[0])

create_env_file('db.env', app_vars)

create_env_file('extra.env', {
  RANDOM_ENV_VAR: rand(1..999),
})

puts(`tail -n+1 #{TOP_DIR}/*`)
